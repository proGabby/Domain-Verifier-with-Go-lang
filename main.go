package main

import (
	"bufio" //implements buffered I/O
	"fmt"
	"log"
	"net"
	"os"
	"strings"
)

func main() {
	//new Scanner to read from an os file
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Printf("enter the domain:  ")

	//scan all available domain
	for scanner.Scan() {
		//.text returns the most recent token generated by a call to Scan
		checkDomain(scanner.Text())
	}
	//check for scanning error
	if err := scanner.Err(); err != nil {
		log.Fatalf("Error: could not read from input: %v\n", err)
	}
}

func checkDomain(domain string) {
	var hasMx, hasSPF, hasDMARC bool
	var spfRecord, dmarcRecord string

	//The MX record indicates how email messages should be routed in accordance with the Simple Mail Transfer Protocol (SMTP, the standard protocol for all email).
	//MX record must always point to another domain.

	//check for DNS MX records for the given domain name
	mxRecords, err := net.LookupMX(domain)
	//check for MxLOOKUP error
	if err != nil {
		log.Printf("Error: %v\n", err)
	}
	//check for record length to ensure it is not empty
	if len(mxRecords) > 0 {
		//set hasMx to true
		hasMx = true
	}

	// (TXT) record lets a domain administrator enter text into the Domain Name System (DNS)
	// TXT record is use for email spam prevention and domain ownership verification
	//this verification could be done using
	//SPF (sender policy framework) record in the txt file
	//domain-based Message Authentication, Reporting & Conformance (DMARC)
	//Domain Keys Identified Mail (DKIM)

	//lookup DNS txt record
	txtRecord, err := net.LookupTXT(domain)
	//check for lookup error
	if err != nil {
		log.Printf("Error: %v\n", err)
	}
	//iterate through txtRecord
	for _, record := range txtRecord {

		//checking the spf record via it prefix
		//Note: SPF TXT records list all the servers that are authorized to send email messages from a domain.
		if strings.HasPrefix(record, "v=spfi") {
			hasSPF = true
			spfRecord = record
			break
		}
	}

	//lookup txt for _dmarc
	dmarcRecords, err := net.LookupTXT("_dmarc." + domain)
	//check for lookup error
	if err != nil {
		log.Printf("Error %v\n", err)
	}
	//iterate through the dmarc record found
	for _, record := range dmarcRecords {
		if strings.HasPrefix(record, "v=DMARC1") {
			hasDMARC = true
			dmarcRecord = record
			break
		}
	}

	fmt.Printf("domain: %v, hasMx: %v, hasSPF: %v, spfRecord: %v, hasDMARC: %v, dmarcRecord: %v", domain, hasMx, hasSPF, spfRecord, hasDMARC, dmarcRecord)
}
